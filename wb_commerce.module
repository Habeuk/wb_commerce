<?php

/**
 * @file
 * Contains wb_shipping.module.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\lesroidelareno\lesroidelareno;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function wb_commerce_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
      // Main module help for the wb_shipping module.
    case 'help.page.wb_shipping':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Modules to handle shipping by domain') . '</p>';
      return $output;

    default:
  }
}

function wb_commerce_form_hbkcolissimochrono_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // dd("hello");
  $request = Drupal::request();
  $query = $request->query->get('domain_config_ui_domain');
  $domain =  lesroidelareno::getCurrentDomainId();
  if (empty($query) || $domain !== $query) {
    $url = Url::fromRoute("hbkcolissimochrono.settings", [], [
      'query' => [
        'domain_config_ui_domain' => $domain,
        'domain_config_ui_language' => ''
      ],
      'absolute' => TRUE
    ]);
    $response =  new RedirectResponse($url->toString());
    $response->send();
  }
}

function wb_commerce_update_8002() {
  $entity_type_id = "commerce_payment_config";
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  /**
   *
   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $entityStorage
   */
  $entityStorage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
  // Retrieve existing field data.
  $database = \Drupal::database();
  $table = $entity_type_id;
  $names = $database->select($table, 'et')->fields('et', [
    "id",
    "publishable_key",
    "secret_key",
    "langcode"
  ])->execute()->fetchAll(\PDO::FETCH_ASSOC);
  // Remove data from the column.
  $database->update($table)->fields([
    'publishable_key' => NULL,
    'secret_key' => NULL,

  ])->execute();
  //
  // si les revisions sont activÃ©es.



  // Remove old definition field.
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $storagedef = $updateManager->getFieldStorageDefinition('publishable_key', $entity_type_id);
  $updateManager->uninstallFieldStorageDefinition($storagedef);
  $storagedef = $updateManager->getFieldStorageDefinition('secret_key', $entity_type_id);
  $updateManager->uninstallFieldStorageDefinition($storagedef);
  // Load new definition field in code.
  /**
   *
   * @var \Drupal\Core\Entity\EntityFieldManager $fieldManager
   */
  $fieldManager = \Drupal::service('entity_field.manager');
  $fields = $fieldManager->getFieldStorageDefinitions($entity_type_id);
  $updateManager->installFieldStorageDefinition('publishable_key', $entity_type_id, "lesroidelareno", $fields['publishable_key']);
  $updateManager->installFieldStorageDefinition('secret_key', $entity_type_id, "lesroidelareno", $fields['secret_key']);
  // Restore entity data in the new schema.
  foreach ($names as $name) {
    $database->update($table)->fields([
      'publishable_key' => $name['publishable_key'],
      'secret_key' => $name['secret_key']
    ])->condition('id', $name['id'])->condition('langcode', $name['langcode'])->execute();
  }
}
